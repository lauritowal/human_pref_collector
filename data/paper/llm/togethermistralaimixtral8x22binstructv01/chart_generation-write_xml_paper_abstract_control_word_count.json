{
    "item_type": "paper",
    "title": "Chart Generation",
    "descriptions": [
        " The paper delves into the topic of chart generation, addressing the question of whether charts constitute a natural uniform architecture for parsing and generation. The authors explore the extent to which parsing charts can bring comparable advantages to the generation process as they do to parsing.\n\nThe paper first explains that chart parsing is not a well-defined notion, but rather involves four related ideas: inactive edges, active edges, the algorithm schema, and indexing. Inactive edges involve collecting equivalent sets of phrases into edges and constructing edges from edges rather than phrases from phrases. Active edges allow for the construction of new phrases of any size by considering existing edges pair-wise and making provision for partial phrases. The algorithm schema involves placing newly created edges on an agenda and moving them to the chart one by one until none remain to be moved. Positions in the string can be used to index edges so that the algorithm schema need only consider interactions between adjacent pairs.\n\nThe paper proceeds to discuss generation, defining a generator as the inverse of a parser. The authors propose a procedure for generating a sentence from a structure of a general kind, using the example of a logical form representation of the sentences \"John ran fast\" and \"John ran quickly\". They suggest that the lexicon contains entries like those in (2), with the variables suitably instantiated, which become the initial entries of an agenda. The variables in the 'Cat' and 'Semantics' columns of (2) provide the essential link between syntax and semantics.\n\nThe algorithm schema is then applied, with the entries in (2) moved to the chart in accordance with the schema. The predicates that represent the semantics of a phrase are the union of those representing the constituents. The rules that sanction a phrase show which variables from the two parts are to be identified. The generated phrases are considered as possible phrases based on the rules, and the semantics are mapped onto the original semantic specification. However, the phrase is not considered an output to the generation process as a whole if it subsumes some but not all of the semantic specification.\n\nThe paper concludes by discussing the complexity issue and how the efficiency of the generation chart might be enhanced through indexing. The authors propose a strategy for limiting proliferation of ill effects by allowing only the maximal phrase to be incorporated into larger phrases. They suggest that the natural points of articulation in flat semantic structures are the entities that they have been referring to as indices. They propose a modified procedure for creating active edges with a label that represents a phrase of a category that requires a phrase of another category for its completion. The modified procedure is illustrated with an example.\n\nOverall, the paper provides a detailed exploration of chart generation, offering a procedure for generating a sentence from a given structure and discussing the potential advantages and limitations of using charts as a natural uniform architecture for parsing and generation.",
        " This academic paper explores the use of parsing charts in generation and their potential as a natural uniform architecture for both parsing and generation. The authors focus on the extent to which chart parsing can bring advantages in the generation process comparable to those it brings in parsing.\n\nChart parsing is not a well-defined notion and involves four related ideas: inactive edges, active edges, the algorithm schema, and indexing. Inactive edges refer to the idea that all phrases of a given category covering a given part of the string are equivalent for constructing larger phrases. Efficiency comes from collecting equivalent sets of phrases into edges and constructing edges from edges rather than phrases from phrases. Active edges allow new phrases of any size to be built by considering existing edges pair-wise if provision is made for partial phrases. The algorithm schema involves placing newly created edges on an agenda, moving edges from the agenda to the chart one by one until none remains to be moved, and considering interactions between edges when an edge is moved. Indexing involves using the positions in the string at which phrases begin and end to index edges so that the algorithm schema need only consider interactions between adjacent pairs. Chart parsing is attractive for the analysis of natural languages due to its treatment of ambiguity.\n\nA generator, for the purposes of this paper, is the inverse of a parser. The authors propose a procedure for generating a sentence from a structure with a distinguished index and a list of predicates whose relative order is immaterial. The procedure involves moving entries from an agenda to a chart and considering interactions between entries.\n\nThe authors describe an algorithm schema for generation that is based on the chart parsing algorithm schema. The algorithm involves moving entries from an agenda to a chart, considering interactions between entries, and constructing new entries based on those interactions. The authors describe a strategy for limiting the proliferation of ill effects caused by generating an exponential number of variants of phrases containing modifiers. They also propose an indexing scheme that allows for efficient access to entries through indices.\n\nThe paper concludes by describing the computational complexity of the generation algorithm and proposing remedies for serious flaws in the algorithm schema. The authors also discuss the use of distinct active and inactive edges, even when the rules are all binary, and propose a modified procedure for generation that is reminiscent of left-corner parsing.",
        " Abstract:\n\nThis paper explores the application of chart generation in natural language processing, focusing on the extent to which it brings comparable advantages to those found in parsing. Chart parsing is examined, highlighting its four key components: inactive edges, active edges, the algorithm schema, and indexing. In particular, the paper delves into the use of chart parsing for languages with free word order, proposing a variant of the standard chart parser that utilizes bit vectors instead of string positions for indexing.\n\nThe paper then discusses the inverse of parsing, generation, defining it as a transducer from structures or logical forms to strings. The authors argue that this view has the disadvantage of treating insignificant syntactic differences in logical forms as equally significant as more substantial semantic facts. However, the authors assert that this should not greatly compromise or delay the generator.\n\nThe paper proceeds to outline a procedure for generating a sentence from a flat, semantically-oriented representation of logical form. The procedure involves moving entries from an agenda to a chart using the algorithm schema, with the entries' variables providing the essential link between syntax and semantics. The authors emphasize that the semantics of a phrase must contain all predicates from the input specification that refer to any indices internal to it.\n\nThe paper also addresses the issue of computational complexity in the generation algorithm, proposing a strategy to limit the proliferation of ill effects caused by an exponential number of variants of phrases containing modifiers. This strategy involves allowing only the maximal variant to be incorporated into larger phrases.\n\nLastly, the paper discusses the role of indices in generation, proposing a modified procedure that uses indices as natural points of articulation in flat semantic structures. The procedure involves creating active edges labeled A(...)/C(c ...) whenever a new inactive edge is created with label B(b ...). These active edges represent phrases of category A that require a phrase of category C on the right for its completion. The authors argue that this modified procedure confirms to the standard algorithm schema for chart parsing.",
        " Abstract:\n\nThis paper explores the use of chart generation in natural language processing, focusing on the potential advantages of this approach in both parsing and generation. Chart parsing, though not a well-defined notion, is generally understood to involve inactive and active edges, an algorithm schema, and indexing. Inactive edges represent equivalent sets of phrases that cover a given part of the string, while active edges are new phrases that can be built by considering existing edges pair-wise. The algorithm schema involves placing newly created edges on an agenda and moving them to the chart one by one until none remain. Indexing allows for the efficient consideration of interactions between adjacent pairs of edges. Chart parsing is particularly attractive for the analysis of natural languages due to its ability to handle ambiguity.\n\nThe paper also discusses generation, which is the inverse of parsing, and can be thought of as a parser of structures or logical forms that delivers analyses in the form of strings. The paper proposes a procedure for generating a sentence from a structure of a general kind, using a lexicon with entries such as John, ran, and fast. The entries in the lexicon, with their variables suitably instantiated, become the initial entries of an agenda, and are moved to the chart in accordance with the algorithm schema. The variables in the 'Cat' and 'Semantics' columns of the lexicon entries provide the essential link between syntax and semantics. The predicates that represent the semantics of a phrase will simply be the union of those representing the constituents.\n\nThe paper then describes the algorithm schema for generation, which involves moving entries from the agenda to the chart and considering interactions between them. The paper also discusses the issue of computational complexity in generation, proposing a solution that involves the use of distinct active and inactive edges, even when the rules are all binary. The paper concludes by discussing the use of indexing in generation, which provides a natural way to index the semantic expressions that are the input to the process. Active and inactive edges interact by virtue of indices that they share, and vertices correspond to indices, collecting together sets of edges that could interact. The paper illustrates this procedure with an example sentence and describes the interactions between edges incident from the same vertices.",
        " Abstract:\n\nThis paper explores the application of chart parsing techniques for natural language generation. Chart parsing, although not strictly defined, is characterized by four main ideas: inactive edges, active edges, the algorithm schema, and indexing. Inactive edges represent equivalent sets of phrases, while active edges build new phrases from existing edges. The algorithm schema involves placing newly created edges on an agenda and moving them to the chart for interaction with existing edges. Indexing allows for the efficient consideration of interactions between adjacent pairs.\n\nThe paper argues that a generator can be viewed as the inverse of a parser, transducing structures or logical forms into strings. The proposed generation algorithm follows the chart parsing schema, where entries from a lexicon are moved to the chart, interacting with existing edges to form new phrases. The semantics of a phrase are the union of those representing its constituents, and rules sanction a phrase by identifying variables from its constituents.\n\nThe algorithm's complexity is addressed, with an exponential factor apparent in examples like (8). The paper introduces the concept of internal and external indices to limit the proliferation of ill effects caused by the generation of an exponential number of variants of phrases containing modifiers. The semantics of a phrase must contain all predicates from the input specification that refer to any indices internal to it.\n\nThe paper then proposes a modified indexing procedure for generation, using indices as natural points of articulation in flat semantic structures. Inactive edges are incident from vertices, while active edges are incident from the index that they share. The modified procedure is illustrated with the sentence \"The procedure will be reminiscent of left-corner parsing.\"\n\nThe paper concludes by confirming that the proposed generation algorithm conforms to the standard algorithm schema for chart parsing, particularly in the version that makes predictions immediately following the recognition of the first constituent of a phrase. This version is essentially a caching left-corner parser.",
        " Abstract:\n\nThis paper explores the utility and efficiency of chart generation in natural language processing, building upon Shieber's (1988) work, which demonstrated the application of parsing charts in generation. The authors investigate the extent to which chart generation offers advantages similar to those observed in parsing, focusing on the key concepts of inactive and active edges, the algorithm schema, and indexing.\n\nThe authors begin by discussing the notion of chart parsing, which is not well-defined, but generally involves the ideas of inactive edges, efficiency through collecting equivalent sets of phrases, active edges for constructing new phrases, and an algorithm schema that follows an agenda-based process. Indexing, which uses string positions to index edges, is also a crucial component of chart parsing.\n\nThe paper then transitions to the concept of generation, defining a generator as the inverse of a parser. The authors propose a procedure for generating a sentence from a structure of a given kind, assuming that the lexicon contains entries that subsume the semantics of the words used in the structure. The procedure involves moving entries from an agenda to a chart, with the variables in the 'Cat' and 'Semantics' columns providing the essential link between syntax and semantics.\n\nThe authors use the algorithm schema to outline a generation process, highlighting the creation of edges, the identification of variables, and the rejection of certain phrases that would involve using a predicate from the original semantic specification more than once. The process aims to generate sentences whose semantics subsume the entire input.\n\nThe paper then addresses the computational complexity of the generation algorithm, focusing on the exponential factor apparent in examples like (8). The authors propose a strategy to limit proliferation of ill effects by allowing only the maximal phrase with modifiers to be incorporated into larger phrases. This strategy aims to prevent the generation of an exponential number of variants of phrases containing modifiers.\n\nFinally, the authors discuss indexing in generation, noting that string positions cannot serve as natural points of articulation in generation as they do in parsing. Instead, the natural points of articulation in flat semantic structures are the entities referred to as indices. The authors propose a modified procedure for generation that uses active and inactive edges, which interact by virtue of indices that they share. This procedure is illustrated with an example sentence.\n\nIn conclusion, this paper presents a detailed exploration of chart generation in natural language processing, proposing a procedure for sentence generation and addressing the computational complexity and indexing challenges. The authors' work contributes to ongoing efforts to understand and improve the efficiency of natural language processing systems."
    ],
    "origin": "LLM",
    "llm_engine": "together-mistralai/Mixtral-8x22B-Instruct-v0.1",
    "generation_prompt_uid": "8fba0fea06294e0ddf5763c995f33bd6",
    "generation_prompt_nickname": "write_xml_paper_abstract_control_word_count",
    "generation_prompt_text": "Read the following academic paper provided in XML format and create an abstract for it.\n\nPlease limit the response to 2879 words or less.\n\n---\n\n**Description:**\n\n<PAPER>\n  <S sid=\"0\">Chart Generation</S>\n  <SECTION title=\"1 Charts\" number=\"1\">\n    <S sid=\"104\" ssid=\"1\">Shieber (1988) showed that parsing charts can be also used in generation and raised the question, which we take up again here, of whether they constitute a natural uniform architecture for parsing and generation.</S>\n    <S sid=\"105\" ssid=\"2\">In particular, we will be interested in the extent to which they bring to the generation process advantages comparable to those that make them attractive in parsing.</S>\n    <S sid=\"106\" ssid=\"3\">Chart parsing is not a well defined notion.</S>\n    <S sid=\"107\" ssid=\"4\">The usual conception of it involves at least four related ideas: Inactive edges.</S>\n    <S sid=\"108\" ssid=\"5\">In context-free grammar, all phrases of a given category that cover a given part of the string are equivalent for the purposes of constructing larger phrases.</S>\n    <S sid=\"109\" ssid=\"6\">Efficiency comes from collecting equivalent sets of phrases into (inactive) edges and constructing edges from edges rather than phrases from phrases.</S>\n    <S sid=\"110\" ssid=\"7\">Active edges.</S>\n    <S sid=\"111\" ssid=\"8\">New phrases of whatever size can be built by considering existing edges pair-wise if provision is made for partial phrases.</S>\n    <S sid=\"112\" ssid=\"9\">Partial phrases are collected into edges that are said to be active because they can be thought of as actively seeking material to complete them.</S>\n    <S sid=\"113\" ssid=\"10\">The algorithm schema.</S>\n    <S sid=\"114\" ssid=\"11\">Newly created edges are placed on an agenda.</S>\n    <S sid=\"115\" ssid=\"12\">Edges are moved from the agenda to the chart one by one until none remains to be moved.</S>\n    <S sid=\"116\" ssid=\"13\">When an edge is moved, all interactions between it and edges already in the chart are considered and any new edges that they give rise to are added to the agenda.</S>\n    <S sid=\"117\" ssid=\"14\">Indexing.</S>\n    <S sid=\"118\" ssid=\"15\">The positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.</S>\n    <S sid=\"119\" ssid=\"16\">Chart parsing is attractive for the analysis of natural languages, as opposed to programming languages, for the way in which it treats ambiguity.</S>\n    <S sid=\"120\" ssid=\"17\">Regardless of the number of alternative structures for a particular string that a given phrase participates in, it will be constructed once and only once.</S>\n    <S sid=\"121\" ssid=\"18\">Although the number of structures of a string can grow exponentially with the length of the string, the number of edges that needs to be constructed grows only with the square of the string length and the whole parsing process can be accomplished in cubic time.</S>\n    <S sid=\"122\" ssid=\"19\">Innumerable variants of the basic chart parsing scheme are possible.</S>\n    <S sid=\"123\" ssid=\"20\">For example, if there were languages with truly free word order, we might attempt to characterize them by rules like those of context-free grammar, but with a somewhat different interpretation.</S>\n    <S sid=\"124\" ssid=\"21\">Instead of replacing nonterminal symbols in a derivation with strings from the righthand side of corresponding rules, we would remove the nonterminal symbol and insert the symbols from the righthand side of the rule at arbitrary places in the string.</S>\n    <S sid=\"125\" ssid=\"22\">A chart parser for languages with free word order would be a minor variant of the standard one.</S>\n    <S sid=\"126\" ssid=\"23\">An edge would take the form where v is a vector with a bit for every word in the string and showing which of those words the edge covers.</S>\n    <S sid=\"127\" ssid=\"24\">There is no longer any notion of adjacency so that there would be no indexing by string position.</S>\n    <S sid=\"128\" ssid=\"25\">Interesting interactions occur between pairs of edges whose bit vectors have empty intersections, indicating that they cover disjoint sets of words.</S>\n    <S sid=\"129\" ssid=\"26\">There can now be as many edges as bit-vectors and, not surprisingly, the computational complexity of the parsing process increases accordingly.</S>\n  </SECTION>\n  <SECTION title=\"2 Generation\" number=\"2\">\n    <S sid=\"130\" ssid=\"1\">A parser is a transducer from strings to structures or logical forms.</S>\n    <S sid=\"131\" ssid=\"2\">A generator, for our purposes, is the inverse.</S>\n    <S sid=\"132\" ssid=\"3\">One way to think of it, therefore, is as a parser of structures or logical forms that delivers analyses in the form of strings.</S>\n    <S sid=\"133\" ssid=\"4\">This view has the apparent disadvantage of putting insignificant differences in the syntax of a logical forms, such as the relative order of the arguments to symmetric operators, on the same footing as more significant facts about them.</S>\n    <S sid=\"134\" ssid=\"5\">We know that it will not generally be possible to reduce logical expressions to a canonical form but this does not mean that we should expect our generator to be compromised, or even greatly delayed, by trivial distinctions.</S>\n    <S sid=\"135\" ssid=\"6\">Considerations of this kind were, in part, responsible for the recent resurgence of interest in &amp;quot;flat&amp;quot; representations of logical form (Copestake et a/.,I 996) and for the representations used for transfer in Shake-and-Bake translation (Whitelock, 1992).</S>\n    <S sid=\"136\" ssid=\"7\">They have made semantic formalisms like those now usually associated with Davison (Davidson, 1980, Parsons, 1990) attractive in artificial intelligence for many years (Hobbs 1985, Kay, 1970).</S>\n    <S sid=\"137\" ssid=\"8\">Operationally, the attraction is that the notations can be analyzed largely as free word-order languages in the manner outlined above.</S>\n    <S sid=\"138\" ssid=\"9\">Consider the expression (I) which we will take as a representation of the logical form of the sentences John ran fast and John ran quickly.</S>\n    <S sid=\"139\" ssid=\"10\">It consists of a distinguished index (r) and a list of predicates whose relative order is immaterial.</S>\n    <S sid=\"140\" ssid=\"11\">The distinguished index identifies this as a sentence that makes a claim about a running event.</S>\n    <S sid=\"141\" ssid=\"12\">&amp;quot;John&amp;quot; is the name of the entity that stands in the `argl ' relation to the running which took place in the past and which was fast.</S>\n    <S sid=\"142\" ssid=\"13\">Nothing turns on these details which will differ with differing ontologies, logics, and views of semantic structure.</S>\n    <S sid=\"143\" ssid=\"14\">What concerns us here is a procedure for generating a sentence from a structure of this general kind.</S>\n    <S sid=\"144\" ssid=\"15\">Assume that the lexicon contains entries like those in A prima facie argument for the utility of these particular words for expressing ( I) can be made simply by noting that, modulo appropriate instantiation of the variables, the semantics of each of these words subsumes (1).</S>\n  </SECTION>\n  <SECTION title=\"3 The Algorithm Schema\" number=\"3\">\n    <S sid=\"145\" ssid=\"1\">The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.</S>\n    <S sid=\"146\" ssid=\"2\">The variables in the 'Cat' and 'Semantics' columns of (2) provide the essential link between syntax and semantics.</S>\n    <S sid=\"147\" ssid=\"3\">The predicates that represent the semantics of a phrase will simply be the union of those representing the constituents.</S>\n    <S sid=\"148\" ssid=\"4\">The rules that sanction a phrase (e.g.</S>\n    <S sid=\"149\" ssid=\"5\">(3) below) show which variables from the two parts are to be identified.</S>\n    <S sid=\"150\" ssid=\"6\">When the entry for John is moved, no interactions are possible because the chart is empty.</S>\n    <S sid=\"151\" ssid=\"7\">When run is moved, the sequence John ran is considered as a possible phrase on the basis of rule (3).</S>\n    <S sid=\"152\" ssid=\"8\">With appropriate replacements for variables, this maps onto the subset (4) of the original semantic specification in (1).</S>\n    <S sid=\"153\" ssid=\"9\">Furthermore it is a complete sentence.</S>\n    <S sid=\"154\" ssid=\"10\">However, it does not count as an output to the generation process as a whole because it subsumes some but not all of (1).</S>\n    <S sid=\"155\" ssid=\"11\">It therefore simply becomes a new edge on the agenda.</S>\n    <S sid=\"156\" ssid=\"12\">The string ran fast constitutes a verb phrase by virtue of rule (5) giving the semantics (6), and the phrase ran quickly with the same semantics is put on the agenda when the quickly edge is move to the chart.</S>\n    <S sid=\"157\" ssid=\"13\">Assuming that adverbs modify verb phrases and not sentences, there will be no interactions when the John ran edge is moved to the chart.</S>\n    <S sid=\"158\" ssid=\"14\">When the edge for ran fast is moved, the possibility arises of creating the phrase ran fast quickly as well as ran fast fast.</S>\n    <S sid=\"159\" ssid=\"15\">Both are rejected, however, on the grounds that they would involve using a predicate from the original semantic specification more than once.</S>\n    <S sid=\"160\" ssid=\"16\">This would be similar to allowing a given word to be covered by overlapping phrases in free word-order parsing.</S>\n    <S sid=\"161\" ssid=\"17\">We proposed eliminating this by means of a bit vector and the same technique applies here.</S>\n    <S sid=\"162\" ssid=\"18\">The fruitful interactions that occur here are between ran fast and ran quickly on the one hand, and John on the other.</S>\n    <S sid=\"163\" ssid=\"19\">Both give sentences whose semantics subsumes the entire input.</S>\n    <S sid=\"164\" ssid=\"20\">Several things are noteworthy about the process just outlined.</S>\n    <S sid=\"165\" ssid=\"21\">Points 4 and 5 are serious flaws in our scheme for which we shall describe remedies.</S>\n    <S sid=\"166\" ssid=\"22\">Point 2 will have some importance for us because it will turn out that the indexing scheme we propose will require the use of distinct active and inactive edges, even when the rules are all binary.</S>\n    <S sid=\"167\" ssid=\"23\">We take up the complexity issue first, and then turn to how the efficiency of the generation chart might be enhanced through indexing.</S>\n  </SECTION>\n  <SECTION title=\"4 Internal and External Indices\" number=\"4\">\n    <S sid=\"168\" ssid=\"1\">The exponential factor in the computational complexity of our generation algorithm is apparent in an example like (8).</S>\n    <S sid=\"169\" ssid=\"2\">(8) Newspaper reports said the tall young Polish athlete ran fast The same set of predicates that generate this sentence clearly also generate the same sentence with deletion of all subsets of the words tall, young. and Polish for a total of 8 strings.</S>\n    <S sid=\"170\" ssid=\"3\">Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.</S>\n    <S sid=\"171\" ssid=\"4\">The words newspaper and fast can also be deleted independently giving a grand total of 32 strings.</S>\n    <S sid=\"172\" ssid=\"5\">We concentrate on the phrase tall young Polish athlete which we assumed would be combined with the verb phrase ran fast by the rule (3).</S>\n    <S sid=\"173\" ssid=\"6\">The distinguished index of the noun phrase, call it p, is identified with the variable y in the rule, but this variable is not associated with the syntactic category, s, on the left-hand side of the rule.</S>\n    <S sid=\"174\" ssid=\"7\">The grammar has access to indices only through the variables that annotate grammatical categories in its rules, so that rules that incorporate this sentence into larger phrases can have no further access to the index p. We therefore say that p is internal to the sentence the tall young Polish athlete ran fast.</S>\n    <S sid=\"175\" ssid=\"8\">The index p would, of course, also be internal to the sentences the young Polish athlete ran fast, the tall Polish athlete ran fast, etc.</S>\n    <S sid=\"176\" ssid=\"9\">However, in these cases, the semantic material remaining to be expressed contains predicates that refer to this internal index, say tall(p)' , and `young(p)'.</S>\n    <S sid=\"177\" ssid=\"10\">While the lexicon may have words to express these predicates, the grammar has no way of associating their referents with the above noun phrases because the variables corresponding to those referents are internal.</S>\n    <S sid=\"178\" ssid=\"11\">We conclude that, as a matter of principle, no edge should be constructed if the result of doing so would be to make internal an index occurring in part of the input semantics that the new phrase does not subsume.</S>\n    <S sid=\"179\" ssid=\"12\">In other words, the semantics of a phrase must contain all predicates from the input specification that refer to any indices internal to it.</S>\n    <S sid=\"180\" ssid=\"13\">This strategy does not prevent the generation of an exponential number of variants of phrases containing modifiers.</S>\n    <S sid=\"181\" ssid=\"14\">It limits proliferation of the ill effects, however, by allowing only the maximal one to be incorporated in larger phrases.</S>\n    <S sid=\"182\" ssid=\"15\">In other words, if the final result has phrases with m and n modifiers respectively, then 2' versions of the first and 211' of the second will be created, but only one of each set will be incorporated into larger phrases and no factor of 2'14-no will be introduced into the cost of the process.</S>\n  </SECTION>\n  <SECTION title=\"5 Indexing\" number=\"5\">\n    <S sid=\"183\" ssid=\"1\">String positions provide a natural way to index the strings input to the parsing process for the simple reason that there are as many of them as there are words but, for there to be any possibility of interaction between a pair of edges, they must come together at just one index.</S>\n    <S sid=\"184\" ssid=\"2\">These are the natural points of articulation in the domain of strings.</S>\n    <S sid=\"185\" ssid=\"3\">They cannot fill this role in generation because they are not natural properties of the semantic expressions that are the input to the process.</S>\n    <S sid=\"186\" ssid=\"4\">The corresponding natural points of articulation in flat semantic structures are the entities that we have already been referring to as indices.</S>\n    <S sid=\"187\" ssid=\"5\">In the modified version of the procedure, whenever a new inactive edge is created with label B(b ...). then for all rules of the form in (9), an active edge is also created with label A(...)/C(c ...).</S>\n    <S sid=\"188\" ssid=\"6\">This represents a phrase of category A that requires a phrase of category Con the right for its completion.</S>\n    <S sid=\"189\" ssid=\"7\">In these labels, b and c are (variables representing) the first, or distinguished indices associated with B and C. By analogy with parsing charts, an inactive edge labeled B(b ...) can be thought of as incident from vertex b, which means simply that it is efficiently accessible through the index b.</S>\n    <S sid=\"190\" ssid=\"8\">An active edge A(...)IC(c ...) should be thought of as incident from, or accessible through, the index c. The key property of this scheme is that active and inactive edges interact by virtue of indices that they share and, by letting vertices correspond to indices, we collect together sets of edges that could interact.</S>\n    <S sid=\"191\" ssid=\"9\">We illustrate the modified procedure with the sentence The procedure will be reminiscent of left-corner parsing.</S>\n    <S sid=\"192\" ssid=\"10\">Arguments have been made in favor of a head-driven strategy which would, however, have been marginally more complex (e.g. in Kay (1989), Shieber, et el.</S>\n    <S sid=\"193\" ssid=\"11\">(1989)) and the differences are, in any case, not germane to our current concerns.</S>\n    <S sid=\"194\" ssid=\"12\">The initial agenda, including active edges, and collecting edges by the vertices that they are incident from, is given in (16).</S>\n    <S sid=\"195\" ssid=\"13\">The grammar is consulted only for the purpose of creating active edges and all interactions in the chart are between active and inactive pairs of edges incident from the d the dog np(d) d: dog(d), def(d) saw the vp(s, d)/np(d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) c the cat np(c) c: cat(c), def(c) s saw the vp(s, d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) Among the edges in (16), there are two interactions, one at vertices c and d. They cause the first and third edges in (17) to be added to the agenda.</S>\n    <S sid=\"196\" ssid=\"14\">The first interacts with the active edge originally introduced by the verb &amp;quot;saw&amp;quot; producing the fourth entry in (17).</S>\n    <S sid=\"197\" ssid=\"15\">The label on this edge matches the first item on the right-hand side of rule (12) and the active edge that we show in the second entry is also introduced.</S>\n    <S sid=\"198\" ssid=\"16\">The final interaction is between the first and second edges in (17) which give rise to the edge in (18).</S>\n    <S sid=\"199\" ssid=\"17\">This procedure confirms perfectly to the standard algorithm schema for chart parsing, especially in the version that makes predictions immediately following the recognition of the first constituent of a phrase, that is, in the version that is essentially a caching left-corner parser.</S>\n  </SECTION>\n</PAPER>"
}